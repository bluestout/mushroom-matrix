{{ 'section-logo-bar.css' | asset_url | stylesheet_tag }}

<div
  class="icon_bar_main{% if section.settings.slideshow_layout %} is-grid{% endif %} {% if section.settings.hide_desktop %} large-up-hide {% endif %} {{ section.settings.custom_class }}"
  {% if section.settings.use_gradient %}
    style="background: linear-gradient(180deg, #FBF8F4 0%, #FFF 100%);"
  {% endif %}
>
  <div class="page-width{% unless section.settings.slideshow_layout %} icon_bar_head{% endunless %}">
    {% if section.blocks.size > 0 %}
      <ul class="{% if section.settings.slideshow_layout %}icon-bar-grid{% else %}icon-bar-slider{% endif %} icon-bar">
        {% for block in section.blocks %}
          <li class="icon-bar__item">
            <div class="image-wrapper mx-auto">
              {% if block.settings.image != blank %}
                <div class="abs-wrap">
                  {{
                    block.settings.image
                    | image_url: width: master
                    | image_tag: class: 'icon-bar__image abs', format: 'jpg', preload: true
                  }}
                </div>
              {% else %}
                {{ 'logo' | placeholder_svg_tag: 'placeholder-svg' }}
              {% endif %}
            </div>
            {% if block.settings.icon_title != blank %}
              <p class="h6 expanded">{{ block.settings.icon_title | newline_to_br }}</p>
            {% endif %}
          </li>
        {% endfor %}
      </ul>
    {% endif %}
  </div>
</div>

<style>
  .icon-bar__item {
    display: inline-flex;
    justify-content: center;
    align-items: center;
    box-sizing: border-box;
    padding: 0;
    margin: 0;
    white-space: nowrap;
    gap: 2rem;
  }

  .icon-bar-grid {
    display: flex;
    flex-wrap: wrap;
    gap: 11px;
    list-style: none;
    padding: 0;
    margin: 0;
    justify-content: center;
  }

  .icon-bar-grid .icon-bar__item {
    display: flex;
    flex-direction: column;
    text-align: center;
    justify-content: flex-start;
    flex: 0 0 calc(33.333% - 8px);
    gap: 1rem;
  }

  @media screen and (min-width: 750px) {
    .icon-bar-grid {
      gap: 50px;
    }

    .icon-bar-grid .icon-bar__item {
      flex: 0 0 calc(33.333% - 34px);
    }
  }

  /* Slideshow layout styles */
  .icon-bar-slider .icon-bar__item {
    margin-right: 3rem;
  }

  @media screen and (max-width: 820px) {
    .icon-bar-slider .icon-bar__item {
      margin-right: 3rem !important;
    }
  }

  @media screen and (max-width: 1024px) and (min-width: 821px) {
    .icon-bar-slider .icon-bar__item {
      gap: 2rem;
      margin-right: 3rem !important;
    }
  }
</style>

{% unless section.settings.slideshow_layout %}
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const sliders = document.querySelectorAll('.icon-bar-slider');

      function adjustItemMargins() {
        sliders.forEach((slider) => {
          const items = slider.querySelectorAll('.icon-bar__item');
          const sliderWidth = slider.offsetWidth;
          let totalItemsWidth = 0;

          // Reset margins before recalculating
          items.forEach((item) => {
            item.style.marginLeft = '0';
            item.style.marginRight = '0';
          });

          // Calculate the total width of all items
          items.forEach((item) => {
            totalItemsWidth += item.offsetWidth;
          });

          // Calculate the remaining space in the slider
          const remainingSpace = sliderWidth - totalItemsWidth;

          if (remainingSpace > 0 && items.length > 1) {
            // Calculate the margin for each item
            const margin = remainingSpace / (items.length - 1);

            // Apply the calculated margin to each item except the last one
            items.forEach((item, index) => {
              if (index < items.length - 1) {
                item.style.marginRight = `${margin}px`;
              }
            });

            // Add margin to the last item to ensure spacing between the last and first items
            items[items.length - 1].style.marginRight = `${margin}px`;
          } else if (items.length === 1) {
            // Center the single item if there's only one
            items[0].style.margin = '0 auto';
          }
        });
      }

      // Initial adjustment
      adjustItemMargins();

      // Recalculate item margins on window resize
      window.addEventListener('resize', adjustItemMargins);

      // Initialize Flickity for slideshow
      sliders.forEach((slider) => {
        new Flickity(slider, {
          cellAlign: 'left',
          contain: true,
          wrapAround: true,
          autoPlay: 5000,
          pauseAutoPlayOnHover: false,
          prevNextButtons: false,
          pageDots: false,
          draggable: true,
          groupCells: 1,
          freeScroll: false,
          percentPosition: true,
        });
      });

      // Check if the viewport width is less than 750px (mobile view)
      if (window.matchMedia('(max-width: 820px)').matches) {
        // Select the elements
        const iconBarSection = document.querySelector('.shopify-section.icon-bar');
        const featuredCollectionSection = document.querySelector('.shopify-section.featured-collection');

        // Ensure both elements exist
        if (iconBarSection && featuredCollectionSection) {
          // Move the icon-bar section to be after the featured-collection section
          featuredCollectionSection.parentNode.insertBefore(iconBarSection, featuredCollectionSection.nextSibling);
        }
      }
    });
  </script>
{% endunless %}
{% schema %}
{
  "name": "Icon bar",
  "class": "icon-bar",
  "max_blocks": 20,
  "settings": [
    {
      "type": "checkbox",
      "id": "slideshow_layout",
      "label": "Grid layout",
      "info": "When enabled, displays icons in a 3-column grid instead of a slideshow",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "use_gradient",
      "label": "Use gradient background"
    },
    {
      "type": "checkbox",
      "id": "hide_desktop",
      "label": "Hide on desktop view",
      "default": false
    },
    {
      "type": "text",
      "id": "custom_class",
      "label": "Custom CSS Class",
      "info": "Add a custom CSS class for this section."
    }
  ],
  "blocks": [
    {
      "type": "icon_image",
      "name": "Icon",
      "settings": [
        {
          "type": "textarea",
          "id": "icon_title",
          "label": "Title"
        },
        {
          "type": "image_picker",
          "id": "image",
          "label": "Image"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Logo bar",
      "category": "Icon",
      "blocks": [
        {
          "type": "icon_image"
        },
        {
          "type": "icon_image"
        },
        {
          "type": "icon_image"
        },
        {
          "type": "icon_image"
        }
      ]
    }
  ]
}
{% endschema %}
